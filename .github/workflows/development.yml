name: Development test run
on:
  pull_request:
    branches:
      - 'main'


jobs:
  Build-and-deliver:
    if: github.event.pull_request.head.repo.fork == true
    runs-on: ubuntu-latest

    steps:
      - name: Set up PostgreSQL
        run: |
          sudo apt-get update

          # Install PostgreSQL
          sudo apt-get install -y postgresql postgresql-contrib

          sudo systemctl start postgresql
          sudo systemctl enable postgresql

          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'root';"
          sudo -u postgres psql -c "CREATE DATABASE webapp WITH OWNER = postgres;"

          sudo systemctl restart postgresql

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Set up JDK 19
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '19'

      - name: Setup Maven
        run: chmod +x mvnw && ./mvnw clean package

      - name: Run Integration Tests
        run: mvn verify -DskipTests=false -B

      - name: Zip Project
        run: |
          zip -r webapp.zip ./target ./startup-scripts
          pwd
          ls -l

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: 'latest'

      - name: Run `packer init`
        id: init
        run: packer init ./machine-image/centos.pkr.hcl

      - name: Run `packer validate`
        id: validate
        run: packer validate ./machine-image/centos.pkr.hcl

      - name: Run packer script
        run: |
          output=$(packer build ./machine-image/centos.pkr.hcl)
          echo "$output" > packer_output.txt
          echo "::set-output name=output::$output" # Set the output to be used later

      - name: Update Instance group
        run: |
          last_line=$(tail -n 1 packer_output.txt)
          image_name=$(echo "$last_line" | grep -oE 'centos-[0-9]+' | tail -1)
          echo "::set-output name=image_name::$image_name" # Set the image name to be used later
          image_path="projects/csye6225-dev-414521/global/images/$image_name"
          echo "Full path: $image_path" 
          instanceData=$(gcloud compute instance-templates describe centos-image-instance-template --region="us-east1" --format="json")
          gcloud init
          sudo apt install jq
          sudo apt install -y libc-bin
          diskSizeGb=$(echo "$instanceData" | jq -r '.properties.disks[0].initializeParams.diskSizeGb')
          diskType=$(echo "$instanceData" | jq -r '.properties.disks[0].initializeParams.diskType')
          startupScript=$(echo "$instanceData" | jq -r '.properties.metadata.items[].value')
          serviceAccountEmail=$(echo "$instanceData" | jq -r '.properties.serviceAccounts[0].email')
          serviceAccountScopes=$(echo "$instanceData" | jq -r '.properties.serviceAccounts[0].scopes[0]')
          network=$(echo "$instanceData" | jq -r '.properties.networkInterfaces[0].network')
          subnetwork=$(echo "$instanceData" | jq -r '.properties.networkInterfaces[0].subnetwork')
          machineType=$(echo "$instanceData" | jq -r '.properties.machineType')
          networkTier=$(echo "$instanceData" | jq -r '.properties.networkInterfaces[0].accessConfigs[0].networkTier')
          tags=$(echo "$instanceData" | jq -r '.properties.tags.items[]')
          kmsKeyName=$(echo "$instanceData" | jq -r '.properties.disks[0].diskEncryptionKey.kmsKeyName')
          echo "$startupScript" | iconv -t UTF-8 > startup_script_utf8.sh
          uuid=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d '-')
          echo "::set-output name=unique_id::$uuid"
          instanceTemplateName="cd-instance-template-$uuid"
          gcloud compute instance-templates create $instanceTemplateName --machine-type=$machineType --tags=$tags --image=$image_path --metadata-from-file=startup-script=./startup_script_utf8.sh --network=$network --subnet=$subnetwork --network-tier=$networkTier --service-account=$serviceAccountEmail --scopes=$serviceAccountScopes --instance-template-region=us-east1 --boot-disk-type=$diskType --boot-disk-size=$diskSizeGb --boot-disk-kms-key=$kmsKeyName
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group-manager --version=template=https://compute.googleapis.com/compute/v1/projects/csye6225-dev-414521/regions/us-east1/instanceTemplates/$instanceTemplateName --region=us-east1
          gcloud compute instance-groups managed wait-until webapp-instance-group-manager --version-target-reached --region=us-east1